---
{% if lookup('k8s', cluster_info='version').kubernetes.minor|replace('+', '')|int < 9 %}
apiVersion: extensions/v1beta1
{% else %}
apiVersion: apps/v1
{% endif %}
kind: DaemonSet
metadata:
  name: restic
  namespace: {{ velero_namespace }}
spec:
  selector:
    matchLabels:
      name: restic
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: restic
    spec:
{% if restic_node_selector is defined %}
      nodeSelector: {{ restic_node_selector | to_yaml }}
{% else %}
      nodeSelector: null
{% endif %}
      serviceAccountName: velero
      securityContext:
        runAsUser: 0
      volumes:
{% if 'aws' in default_velero_plugins %}
        - name: {{ velero_aws_secret_name }}
          secret:
            secretName: {{ velero_aws_secret_name }}
{% endif %}
{% if 'gcp' in default_velero_plugins %}
        - name: {{ velero_gcp_secret_name }}
          secret:
            secretName: {{ velero_gcp_secret_name }}
{% endif %}
{% if 'azure' in default_velero_plugins %}
        - name: {{ velero_azure_secret_name }}
          secret:
            secretName: {{ velero_azure_secret_name }}
{% endif %}
        - name: host-pods
          hostPath:
            path: {{ restic_pv_host_path }}
        - name: scratch
          emptyDir: {}
        - name: certs
          emptyDir: {}
{% if restic_tolerations | length > 0 %}
      tolerations:
{% for tol in restic_tolerations %}
{% if tol.key is defined %}
      - key: {{ tol.key }}
{% endif %}
{% if tol.operator is defined %}
        operator: {{ tol.operator }}
{% endif %}
{% if tol.value is defined %}
        value: {{ tol.value }}
{% endif %}
{% if tol.effect is defined %}
        effect: {{ tol.effect }}
{% endif %}
{% if tol.toleration_seconds is defined %}
        tolerationSeconds: {{ tol.toleration_seconds }}
{% endif %} 
{% endfor %}
{% endif %}
      containers:
        - name: velero
          securityContext:
            privileged: true
          image: {{ velero_image_fqin }}
          imagePullPolicy: "{{ image_pull_policy }}"
{% if restic_resource_allocation is defined %}
          resources:
            limits:
              cpu: {{ restic_resource_allocation.limits.cpu }}
              memory: {{ restic_resource_allocation.limits.memory }}
            requests:
              cpu: {{ restic_resource_allocation.requests.cpu }}
              memory: {{ restic_resource_allocation.requests.memory }}
{% else %}
          resources:
            limits:
              cpu: "1"
              memory: 256Mi
            requests:
              cpu: 500m
              memory: 128Mi
{% endif %}
          command:
            - /velero
          args:
            - restic
            - server
          volumeMounts:
{% if 'aws' in default_velero_plugins %}
            - name: {{ velero_aws_secret_name }}
              mountPath: /credentials
{% endif %}
{% if 'gcp' in default_velero_plugins %}
            - name: {{ velero_gcp_secret_name }}
              mountPath: /credentials-gcp
{% endif %}
{% if 'azure' in default_velero_plugins %}
            - name: {{ velero_azure_secret_name }}
              mountPath: /credentials-azure
{% endif %}
            - name: host-pods
              mountPath: /host_pods
              mountPropagation: HostToContainer
            - name: scratch
              mountPath: /scratch
            - name: certs
              mountPath: /etc/ssl/certs
          env:
{% if http_proxy|length >0 %}
            - name: HTTP_PROXY
              value: {{ http_proxy }}
{% endif %}
{% if https_proxy|length >0 %}
            - name: HTTPS_PROXY
              value: {{ https_proxy }}
{% endif %}
{% if no_proxy|length >0 %}
            - name: NO_PROXY
              value: {{ no_proxy }}
{% endif %}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VELERO_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
{% if 'aws' in default_velero_plugins %}
            - name: AWS_SHARED_CREDENTIALS_FILE
              value: /credentials/cloud
{% endif %}
{% if 'gcp' in default_velero_plugins %}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /credentials-gcp/cloud
{% endif %}
{% if 'azure' in default_velero_plugins %}
            - name: AZURE_CREDENTIALS_FILE
              value: /credentials-azure/cloud
{% endif %}
            - name: VELERO_SCRATCH_DIR
              value: /scratch
      initContainers:
        - image: {{ velero_image_fqin }}
          imagePullPolicy: "{{ image_pull_policy }}"
          name: setup-certificate-secret
          command:
            - sh
            - '-ec'
            - >-
              cp /etc/ssl/certs/* /certs/; ln -sf /credentials/ca_bundle.pem
              /certs/ca_bundle.pem;
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: certs
              mountPath: /certs
{% if 'aws' in default_velero_plugins %}
            - name: {{ velero_aws_secret_name }}
              mountPath: /credentials
{% endif %}

